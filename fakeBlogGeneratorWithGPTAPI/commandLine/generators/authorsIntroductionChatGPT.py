import openai
import re
from generators.images.imgutils import get_image


def create_authors(company, user, api_key_GPT):

    # Token Inizialization
    openai.api_key = api_key_GPT

    # Query for ChatGPT
    query = f'Can you give me a brief bio in 4 separate lines of a person who work for a {company} company. Which consist with a random profession role, which could be every one possible at the company, gender(male or female), age, a brief prensentation of two lines and hobbies, for this user {user}? Can you print it in: Name:, Profession:, Gender:, Age:, Bio:? Age need to be a number'
    print('The query is being printed ------------------------')
    print(query)
    full_message = []
    full_message.append({'role': 'user', 'content': query})
    author_bio = introduction_of_the_authors_from_Chat_GPT(full_message)

    return author_bio


def introduction_of_the_authors_from_Chat_GPT(prompt, model="gpt-3.5-turbo"):
    response = openai.ChatCompletion.create(
        model=model,
        messages=prompt,
        max_tokens=300,
        n=1,
        stop=None,
        # Temperature is a parameter that controls the “creativity” or randomness of the text generated by GPT-3.5.
        temperature=1.3,
        # The range can be [0.5-2.0], suggest 1.3
    )

    message = response.choices[0].message.content
    print('Response:')
    print(message)

    # Parsing the response from chatGPT

    pattern = r"(?:Name|name):\s*(.*)"
    matches = re.findall(pattern, message)
    name = matches[0]
    pattern = r"Profession:\s*(.*)"
    matches = re.findall(pattern, message)
    substring_to_remove = 'in a consultancy firm'
    if 'Consultant in a consultancy firm' in matches[0]:
        profession = matches[0].replace(substring_to_remove, '')
    else:
        profession = matches[0]
    pattern = r"(?:Gender:|Gender)\s*(.*)"
    matches = re.findall(pattern, message)
    gender = matches[0]
    pattern = r"Age\s*:\s*(\d+)"
    matches = re.findall(pattern, message)
    age = matches[0]
    pattern = r"Bio:\s*(.+)"
    match = re.search(pattern, message)

    # Check if the Bio was found
    if match:
        bio = match.group(1)
        print("Bio Text:")
        print(bio)
    else:
        print("Pattern bio not found.")

    print("calling the website for the image")
    image = get_image(gender, age)

    # Printing the extracted values after the parsing
    print("Name:", name)
    print("Profession:", profession)
    print("Age:", age)
    print("Gender:", gender)
    print("Bio:", bio)

    author_bio = []

    author_bio.append(name)
    author_bio.append(profession)
    author_bio.append(age)
    author_bio.append(bio)
    author_bio.append(image)

    return author_bio


result = ''


def create_authors_with_retries(company, user, api_key_GPT, max_retries=3):
    '''
    Trial and error logic, in case there is an error from chatGPT regarding prompt limitations
    '''
    for _ in range(max_retries):
        try:
            result = create_authors(company, user, api_key_GPT)
            return result
        except Exception as e:
            print(f"An error occurred: {e}")

    print("Function couldn't generate article after retries.")
    return None


if result is not None:
    print("")
else:
    print("Creation author failed after retries.")
